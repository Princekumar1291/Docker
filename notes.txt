//virtulization vs containerization
virtulization: create a whole virtual machine on top of a physical machine, thus it takes up a lot of resources
containerization: create a container on top of a physical machine, which takes up a lot less resources


//Docker Architecture
🔧 1. Docker Engine(Docker application container Engine)
Docker Engine is the core software that enables all Docker functionalities. It's the runtime that builds and runs containers. It includes three main components:

🐳 2. Docker Daemon (dockerd)
What it is: It's a background service running on the host machine.
Role:
Listens for Docker API requests.
Manages Docker objects like images, containers, networks, and volumes.
Can communicate with other Docker daemons for swarm clustering.
Example: When you run docker run nginx, the Docker CLI sends that command to dockerd, which pulls the image, creates a container, and starts it.

💻 3. Docker CLI
What it is: A command-line interface tool (docker) that users interact with.
Role:
Sends commands to the Docker daemon via the Docker REST API.
Example commands: docker build, docker run, docker ps, etc.


//Docker Installation
sudo apt install docker.io

//Docker Status
sudo systemctl status docker

//Docker commands
docker


sudo usermod -aG docker $USER
🛠️ What It Does
Adds your user to the docker group.
Users in the docker group can run Docker commands without using sudo.


newgrp docker
🔍 What It Does
Applies the group membership change (adding your user to the docker group) immediately in your current terminal session.
Without logging out and back in, it starts a new shell with docker group privileges.


docker ps
Lists all running Docker containers on your system.


docker file -> docker image -> docker container
Dockerfile: A text file containing instructions to build a Docker image.
docker build: The command used to create a Docker image from the Dockerfile.
Docker Image: A read-only template that includes the application and its dependencies.
docker run: The command to create and start a container from a Docker image.
Docker Container: A running instance of a Docker image, providing an isolated environment for the application.


docker images
The docker images command is used to list all Docker images available on your local system.



docker login
The docker login command is used to log in to a Docker registry, which is a place where you can store and share Docker images.
You can use docker login to log in to a Docker registry that you have access to, such as Docker Hub or a private registry hosted on your own server.


docker pull <image_name>
The docker pull command is used to download a Docker image from a Docker registry.


🔹To delete a single image by name or ID:
docker rmi <image_name_or_id>
ex-> docker rmi javaapp
or
To force delete (even if containers use it):
docker rmi -f <image_name_or_id>


docker build -t javaapp .
The docker build command is used to build a Docker image from a Dockerfile.


docker run javaapp
The docker run command is used to create and start a container from a Docker image.


💡 Dockerfile Key Instructions
Command	Description
FROM	Sets the base image
WORKDIR	Sets the directory where commands run
COPY	Copies files from your system to the image
RUN	Runs a shell command (e.g., compile code)
CMD	Command to run when container starts


FROM openjdk:17-jdk-alpine
WORKDIR /app
COPY . .
# Compile and put .class files directly into /app
RUN javac -d . src/Main.java
# Run the Main class (from /app/Main.class)
CMD ["java", "Main"]


python app
# Base image (OS)
FROM python:3.9-slim
# Working directory
WORKDIR /app
# Copy src code to container
COPY . .
# Run the build commands
RUN pip install -r requirements.txt
# expose port 80
EXPOSE 80
# serve the app / run the app (keep it running)
CMD ["python","run.py"]

docker build -t flaskapp .
docker run -p 80:80 flaskapp  or docker run -d -p 80:80 flaskapp
 //Maps port 80 on your host (EC2) to port 80 in the container


to see the logs of the container -> docker logs -f f5da791f6230 or  docker logs f5da791f6230

docker stop f5da791f6230 -> to stop the container

docker start f5da791f6230 -> to start the container


docker run -d --name mysql-container -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 mysql

docker run ->	Tells Docker to create and start a container.
-d ->	Runs the container in detached mode (in the background).
--name mysql-container ->	Names the container mysql-container for easy reference.
-e MYSQL_ROOT_PASSWORD=yourpassword ->	Sets the root password for MySQL using an environment variable (required for initialization).
-p 3306:3306 ->	Maps port 3306 on your host to port 3306 inside the container (MySQL's default port).
mysql ->	Specifies the Docker image to use (the official MySQL image from Docker Hub).